from math import gcd

# Function to calculate modular inverse of 'a' under modulo 'm'
def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

# Function to encrypt plaintext using the Affine Cipher
def affine_encrypt(text, a, b, m=26):
    if gcd(a, m) != 1:
        raise ValueError("Key 'a' must be coprime with the alphabet size.")
    
    encrypted_text = ""
    for char in text:
        if char.isalpha():  # Process only alphabetic characters
            offset = 65 if char.isupper() else 97  # Handle uppercase and lowercase separately
            x = ord(char) - offset
            encrypted_text += chr(((a * x + b) % m) + offset)
        else:
            encrypted_text += char  # Leave non-alphabetic characters unchanged
    return encrypted_text

# Function to decrypt ciphertext using the Affine Cipher
def affine_decrypt(text, a, b, m=26):
    if gcd(a, m) != 1:
        raise ValueError("Key 'a' must be coprime with the alphabet size.")
    
    a_inv = mod_inverse(a, m)
    if a_inv is None:
        raise ValueError("Multiplicative inverse of 'a' does not exist.")
    
    decrypted_text = ""
    for char in text:
        if char.isalpha():  # Process only alphabetic characters
            offset = 65 if char.isupper() else 97  # Handle uppercase and lowercase separately
            y = ord(char) - offset
            decrypted_text += chr(((a_inv * (y - b)) % m) + offset)
        else:
            decrypted_text += char  # Leave non-alphabetic characters unchanged
    return decrypted_text

# Example usage
if __name__ == "__main__":
    plaintext = "HELLO WORLD"
    a = 5  # Encryption key (must be coprime with 26)
    b = 8  # Encryption key
    m = 26  # Alphabet size (English alphabet)

    # Encryption
    encrypted = affine_encrypt(plaintext, a, b, m)
    print(f"Encrypted Text: {encrypted}")

    # Decryption
    decrypted = affine_decrypt(encrypted, a, b, m)
    print(f"Decrypted Text: {decrypted}")


//Output 
Plaintext: HELLO AFFINE CIPHER
Keys: a = 7, b = 3
Encrypted Text: UTYYD DCCKQ TJKUTW
Decrypted Text: HELLO AFFINE CIPHER
